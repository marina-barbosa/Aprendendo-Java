

comando de impress√£o   :    https://www.youtube.com/watch?v=_pl5GqDwG5A

%n quebra de linha
print - nao executa quebra de linha
pra quebrar linha com print use \n
println - executa quebra de linha no final

printf - A fun√ß√£o printf (abreviatura de print formatted) exibe na tela do terminal uma lista formatada de n√∫meros, caracteres, strings, etc. O primeiro argumento da fun√ß√£o √© uma string que especifica o formato da impress√£o.


Print
Ele √© o b√°sic√£o, faz exatamente o que se prop√µe a fazer, exibir mensagens na tela. Nada mais, nada menos.

Notem que podemos colocar textos e as vari√°veis juntas, separando apenas com virgula.

Alt Text
x := "eu pulo linhas"
fmt.Println("Eu sou o println e", x)
Println
O ln vem de line. O println √© o √∫nico que pula uma linha ap√≥s mostrar a mensagem. Fica mas leg√≠vel e organizado. Se quisermos pular linha no print ou no printf, temos que utilizar o \n: fmt.Print("Quero pular uma linha\n").

Aqui tamb√©m podemos juntar textos e vari√°veis, separando com a virgula.
frase := "n√£o tenho nada de b√°sico" 

fmt.Printf("Eu sou o printf e %v", frase)
Printf
Logo de cara percebemos que estamos usando um neg√≥cio novo, %v √© um format verb. Existem muitos na linguagem, e o printf permite que utilizemos.

Primeiro devemos saber que esse "v" vem de value, estou querendo mostrar o valor de algo, ou seja, o valor da minha vari√°vel.

Voc√™s devem estar se perguntando: Por que usar o format verb?

A resposta √© simples, no printf √© obrigat√≥rio utiliza-lo. N√£o podemos simplesmente colocar o nome da vari√°vel separado por virgula, como fizemos no print e no println.

Devemos colocar o format verb dentro do texto, como se fosse parte do que queremos mostrar fmt.Printf("Quero mostrar essa menagem %v"). Claro que n√£o queremos mostrar um %v na mensagem, n√£o faz sentido, tanto √© que se deixarmos assim, o c√≥digo vai dar erro. Ent√£o como fazemos?

Queremos que no lugar do %v apare√ßa o valor da nossa vari√°vel, ent√£o temos liga-lo a ela. Isso √© simples de fazer.
nome := "Korra"
idade := 17

fmt.Printf("A %v tem %v anos", nome, idade)
Percebam que o primeiro %v deve ser subsistido pela vari√°vel nome, j√° o segundo deve ser subsistido pela vari√°vel idade. Para fazer isso basta colocar uma virgula depois da mensagem e chamar as vari√°veis na ordem correta. Primeiro nome e depois a idade.

Agora que entendemos basicamente como os format verbs funcionam, vamos conhecer mais alguns deles. Eles podem fazer coisas muito legais.
%v : para valor
%T : para tipo da vari√°vel
%d : para n√∫meros decimais
%b : para n√∫meros bin√°rios 
%#u : para unicode 
%#x : para n√∫meros hexadecimal 
Se voc√™s quiserem saber mais, a documenta√ß√£o da linguagem tem a lista completa dos format verbs. üëâaquiüëà


======   metodo, fun√ß√£o, procedimento : https://pt.stackoverflow.com/questions/11848/quais-s%C3%A3o-as-defini%C3%A7%C3%B5es-de-m%C3%A9todo-fun%C3%A7%C3%A3o-e-procedimento#:~:text=Fun%C3%A7%C3%A3o%3A%20Parte%20de%20um%20programa,%2C%20java%2C%20etc.).

um procedimento √© um algoritmo que ser√° executado, 

enquanto que a fun√ß√£o √© um algoritmo que ser√° executado e produzir√° um resultado final concreto que poder√° ser usado por outro algoritmo.


Em algor√≠timo as fun√ß√µes (functions), tamb√©m conhecidas como sub-rotinas, sempre retornam algum valor. Um dos grandes benef√≠cios √© n√£o precisar copiar o c√≥digo todas as vezes que precisar executar aquela opera√ß√£o, al√©m de deixar a leitura do c√≥digo mais intuitiva. Por exemplo: Vc pode criar uma fun√ß√£o pra calcular a raiz quadrada e retornar um valor. Sempre que precisar, a mesma fun√ß√£o ser√° chamada e n√£o precisar√° recriar o calculo v√°rias vezes no seu c√≥digo. Vc criar apenas uma vez.

Os procedimentos (procedures) diferem das fun√ß√µes apenas por n√£o retornarem resultado. Exemplo: para ler o valor digitado por um usu√°rio n√≥s utilizamos o procedimento LEIA e para mostrar um texto na tela n√≥s utilizamos o procedimento ESCREVA. O primeiro apenas guarda o texto e o segundo apenas imprime na tela, n√£o retornando valores para serem usados.


E o m√©todo, √© uma fun√ß√£o ou um procedimento?

Um m√©todo pode ser tanto uma fun√ß√£o quanto um procedimento. Chamamos uma fun√ß√£o ou procedimento de m√©todo na programa√ß√£o orientada a objetos quando estes est√£o associados a um objeto ou uma classe. M√©todo √© o nome que se d√° a fun√ß√µes e procedimentos em linguagens orientadas a objetos, apenas por uma quest√£o conceitual destas linguagens. No fundo, acabam sendo a mesma coisa.



=====

conven√ß√£o de nomenclatura usada por developers para deixar o seu c√≥digo mais leg√≠vel para outros DEVs. 

https://www.alura.com.br/artigos/convencoes-nomenclatura-camel-pascal-kebab-snake-case
